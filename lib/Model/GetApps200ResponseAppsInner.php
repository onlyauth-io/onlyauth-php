<?php
/**
 * GetApps200ResponseAppsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OnlyAuth API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetApps200ResponseAppsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetApps200ResponseAppsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getApps_200_response_apps_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sandbox_mode' => 'bool',
        'allow_sms_channel' => 'bool',
        'client_id' => 'string',
        'friendly_name' => 'string',
        'icon' => 'string',
        'allow_totp_channel' => 'bool',
        'enabled' => 'int',
        'webauthn_redirect_allowed' => 'bool',
        'app_domain' => 'string',
        'webauthn_enabled' => 'bool',
        'id' => 'string',
        'supported_factors' => 'string',
        'webauth_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sandbox_mode' => null,
        'allow_sms_channel' => null,
        'client_id' => null,
        'friendly_name' => null,
        'icon' => null,
        'allow_totp_channel' => null,
        'enabled' => null,
        'webauthn_redirect_allowed' => null,
        'app_domain' => null,
        'webauthn_enabled' => null,
        'id' => null,
        'supported_factors' => null,
        'webauth_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sandbox_mode' => false,
        'allow_sms_channel' => false,
        'client_id' => false,
        'friendly_name' => false,
        'icon' => false,
        'allow_totp_channel' => false,
        'enabled' => false,
        'webauthn_redirect_allowed' => true,
        'app_domain' => false,
        'webauthn_enabled' => false,
        'id' => false,
        'supported_factors' => false,
        'webauth_enabled' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sandbox_mode' => 'sandbox_mode',
        'allow_sms_channel' => 'allow_sms_channel',
        'client_id' => 'client_id',
        'friendly_name' => 'friendly_name',
        'icon' => 'icon',
        'allow_totp_channel' => 'allow_totp_channel',
        'enabled' => 'enabled',
        'webauthn_redirect_allowed' => 'webauthn_redirect_allowed',
        'app_domain' => 'app_domain',
        'webauthn_enabled' => 'webauthn_enabled',
        'id' => 'id',
        'supported_factors' => 'supported_factors',
        'webauth_enabled' => 'webauth_enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sandbox_mode' => 'setSandboxMode',
        'allow_sms_channel' => 'setAllowSmsChannel',
        'client_id' => 'setClientId',
        'friendly_name' => 'setFriendlyName',
        'icon' => 'setIcon',
        'allow_totp_channel' => 'setAllowTotpChannel',
        'enabled' => 'setEnabled',
        'webauthn_redirect_allowed' => 'setWebauthnRedirectAllowed',
        'app_domain' => 'setAppDomain',
        'webauthn_enabled' => 'setWebauthnEnabled',
        'id' => 'setId',
        'supported_factors' => 'setSupportedFactors',
        'webauth_enabled' => 'setWebauthEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sandbox_mode' => 'getSandboxMode',
        'allow_sms_channel' => 'getAllowSmsChannel',
        'client_id' => 'getClientId',
        'friendly_name' => 'getFriendlyName',
        'icon' => 'getIcon',
        'allow_totp_channel' => 'getAllowTotpChannel',
        'enabled' => 'getEnabled',
        'webauthn_redirect_allowed' => 'getWebauthnRedirectAllowed',
        'app_domain' => 'getAppDomain',
        'webauthn_enabled' => 'getWebauthnEnabled',
        'id' => 'getId',
        'supported_factors' => 'getSupportedFactors',
        'webauth_enabled' => 'getWebauthEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sandbox_mode', $data ?? [], null);
        $this->setIfExists('allow_sms_channel', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('friendly_name', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('allow_totp_channel', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('webauthn_redirect_allowed', $data ?? [], null);
        $this->setIfExists('app_domain', $data ?? [], null);
        $this->setIfExists('webauthn_enabled', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('supported_factors', $data ?? [], null);
        $this->setIfExists('webauth_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sandbox_mode'] === null) {
            $invalidProperties[] = "'sandbox_mode' can't be null";
        }
        if ($this->container['allow_sms_channel'] === null) {
            $invalidProperties[] = "'allow_sms_channel' can't be null";
        }
        if ($this->container['icon'] === null) {
            $invalidProperties[] = "'icon' can't be null";
        }
        if ($this->container['allow_totp_channel'] === null) {
            $invalidProperties[] = "'allow_totp_channel' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        if ($this->container['app_domain'] === null) {
            $invalidProperties[] = "'app_domain' can't be null";
        }
        if ($this->container['webauthn_enabled'] === null) {
            $invalidProperties[] = "'webauthn_enabled' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sandbox_mode
     *
     * @return bool
     */
    public function getSandboxMode()
    {
        return $this->container['sandbox_mode'];
    }

    /**
     * Sets sandbox_mode
     *
     * @param bool $sandbox_mode Indicates if the app is in sandbox mode
     *
     * @return self
     */
    public function setSandboxMode($sandbox_mode)
    {
        if (is_null($sandbox_mode)) {
            throw new \InvalidArgumentException('non-nullable sandbox_mode cannot be null');
        }
        $this->container['sandbox_mode'] = $sandbox_mode;

        return $this;
    }

    /**
     * Gets allow_sms_channel
     *
     * @return bool
     */
    public function getAllowSmsChannel()
    {
        return $this->container['allow_sms_channel'];
    }

    /**
     * Sets allow_sms_channel
     *
     * @param bool $allow_sms_channel Indicates if SMS channel is allowed for guests
     *
     * @return self
     */
    public function setAllowSmsChannel($allow_sms_channel)
    {
        if (is_null($allow_sms_channel)) {
            throw new \InvalidArgumentException('non-nullable allow_sms_channel cannot be null');
        }
        $this->container['allow_sms_channel'] = $allow_sms_channel;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Client identifier (CLNT-XXX)
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets friendly_name
     *
     * @return string|null
     */
    public function getFriendlyName()
    {
        return $this->container['friendly_name'];
    }

    /**
     * Sets friendly_name
     *
     * @param string|null $friendly_name Friendly name of the app
     *
     * @return self
     */
    public function setFriendlyName($friendly_name)
    {
        if (is_null($friendly_name)) {
            throw new \InvalidArgumentException('non-nullable friendly_name cannot be null');
        }
        $this->container['friendly_name'] = $friendly_name;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon URL to the app's icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets allow_totp_channel
     *
     * @return bool
     */
    public function getAllowTotpChannel()
    {
        return $this->container['allow_totp_channel'];
    }

    /**
     * Sets allow_totp_channel
     *
     * @param bool $allow_totp_channel Indicates if TOTP channel is allowed for guests
     *
     * @return self
     */
    public function setAllowTotpChannel($allow_totp_channel)
    {
        if (is_null($allow_totp_channel)) {
            throw new \InvalidArgumentException('non-nullable allow_totp_channel cannot be null');
        }
        $this->container['allow_totp_channel'] = $allow_totp_channel;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return int
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param int $enabled Indicates if the app is enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets webauthn_redirect_allowed
     *
     * @return bool|null
     */
    public function getWebauthnRedirectAllowed()
    {
        return $this->container['webauthn_redirect_allowed'];
    }

    /**
     * Sets webauthn_redirect_allowed
     *
     * @param bool|null $webauthn_redirect_allowed Indicates if WebAuthn redirect is allowed when webauthn_enabled is set to true
     *
     * @return self
     */
    public function setWebauthnRedirectAllowed($webauthn_redirect_allowed)
    {
        if (is_null($webauthn_redirect_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'webauthn_redirect_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webauthn_redirect_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webauthn_redirect_allowed'] = $webauthn_redirect_allowed;

        return $this;
    }

    /**
     * Gets app_domain
     *
     * @return string
     */
    public function getAppDomain()
    {
        return $this->container['app_domain'];
    }

    /**
     * Sets app_domain
     *
     * @param string $app_domain Domain of the app
     *
     * @return self
     */
    public function setAppDomain($app_domain)
    {
        if (is_null($app_domain)) {
            throw new \InvalidArgumentException('non-nullable app_domain cannot be null');
        }
        $this->container['app_domain'] = $app_domain;

        return $this;
    }

    /**
     * Gets webauthn_enabled
     *
     * @return bool
     */
    public function getWebauthnEnabled()
    {
        return $this->container['webauthn_enabled'];
    }

    /**
     * Sets webauthn_enabled
     *
     * @param bool $webauthn_enabled Indicates if WebAuthn is enabled
     *
     * @return self
     */
    public function setWebauthnEnabled($webauthn_enabled)
    {
        if (is_null($webauthn_enabled)) {
            throw new \InvalidArgumentException('non-nullable webauthn_enabled cannot be null');
        }
        $this->container['webauthn_enabled'] = $webauthn_enabled;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Uuid of the app (APPX-XXX)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets supported_factors
     *
     * @return string|null
     */
    public function getSupportedFactors()
    {
        return $this->container['supported_factors'];
    }

    /**
     * Sets supported_factors
     *
     * @param string|null $supported_factors Supported factors for the app
     *
     * @return self
     */
    public function setSupportedFactors($supported_factors)
    {
        if (is_null($supported_factors)) {
            throw new \InvalidArgumentException('non-nullable supported_factors cannot be null');
        }
        $this->container['supported_factors'] = $supported_factors;

        return $this;
    }

    /**
     * Gets webauth_enabled
     *
     * @return bool|null
     */
    public function getWebauthEnabled()
    {
        return $this->container['webauth_enabled'];
    }

    /**
     * Sets webauth_enabled
     *
     * @param bool|null $webauth_enabled Indicates if WebAuth is enabled
     *
     * @return self
     */
    public function setWebauthEnabled($webauth_enabled)
    {
        if (is_null($webauth_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'webauth_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webauth_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webauth_enabled'] = $webauth_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


